package IonicEncuestasLenguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Encuesta;
  private ConceptPresentation props_Pregunta;
  private ConceptPresentation props_UnaRespuestaCuatroOpciones;
  private ConceptPresentation props_UnaRespuestaDosOpciones;
  private ConceptPresentation props_UnaRespuestaTresOpciones;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Encuesta:
        if (props_Encuesta == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Encuesta = cpb.create();
        }
        return props_Encuesta;
      case LanguageConceptSwitch.Pregunta:
        if (props_Pregunta == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Pregunta = cpb.create();
        }
        return props_Pregunta;
      case LanguageConceptSwitch.UnaRespuestaCuatroOpciones:
        if (props_UnaRespuestaCuatroOpciones == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("URCO");
          props_UnaRespuestaCuatroOpciones = cpb.create();
        }
        return props_UnaRespuestaCuatroOpciones;
      case LanguageConceptSwitch.UnaRespuestaDosOpciones:
        if (props_UnaRespuestaDosOpciones == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("URDO");
          props_UnaRespuestaDosOpciones = cpb.create();
        }
        return props_UnaRespuestaDosOpciones;
      case LanguageConceptSwitch.UnaRespuestaTresOpciones:
        if (props_UnaRespuestaTresOpciones == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("URTO");
          props_UnaRespuestaTresOpciones = cpb.create();
        }
        return props_UnaRespuestaTresOpciones;
    }
    return null;
  }
}
